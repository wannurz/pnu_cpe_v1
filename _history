{"entries":[{"timestamp":1745995632424,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"pnu_cpe.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":218,"start2":218,"length1":67,"length2":44}]},{"type":"added","filename":"pnu_cpe.ts","value":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1\"\n    SV1,\n    //% block=\"SV2\"\n    SV2\n}\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    /**\n     * Control Servo 1 or 2 set degree between 0 - 180\n     * @param Degree servo degree 0-180, eg: 90\n     */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoWritePin(AnalogPin.P8, Degree)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoWritePin(AnalogPin.P12, Degree)\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    export function ServoStop(Servo: cpeServo): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoSetPulse(AnalogPin.P8, 0)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoSetPulse(AnalogPin.P12, 0)\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n}\n"}]},{"timestamp":1745995673086,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"iBIT\": \"github:emwta/pxt-ibit#v4.0.10\""],[0,"\n   "]],"start1":134,"start2":134,"length1":57,"length2":8}]}]},{"timestamp":1745999396826,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"><block "],[1,"type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block "],[0,"type=\"de"]],"start1":77,"start2":77,"length1":16,"length2":65}]}]},{"timestamp":1745999409622,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"225"],[0,"\" y=\""],[1,"2"],[0,"0\"><"]],"start1":106,"start2":106,"length1":14,"length2":17}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".10\""],[-1,",\n        \"pxt-PTKidsBIT-Robot\": \"github:iBuilds/pxt-PTKidsBIT-Robot#v1.6.4\""],[0,"\n   "]],"start1":183,"start2":183,"length1":84,"length2":8},{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":317,"start2":317,"length1":21,"length2":17}]}]},{"timestamp":1745999781336,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":393,"start2":393,"length1":17,"length2":21}]}]},{"timestamp":1746000731283,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"  M2\n}\n\n"],[-1,"\n"],[0,"/**\n* Cu"]],"start1":977,"start2":977,"length1":17,"length2":16}]}]},{"timestamp":1746000749764,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"2\n}\n"],[-1,"/**\n * Digital pins P0 to P12\n */\nenum cpeDigitalPin {\n    //% block=\"P0\"\n    P0 = 0,\n    //% block=\"P1\"\n    P1 = 1,\n    //% block=\"P2\"\n    P2 = 2,\n    //% block=\"P3\"\n    P3 = 3,\n    //% block=\"P4\"\n    P4 = 4,\n    //% block=\"P5\"\n    P5 = 5,\n    //% block=\"P6\"\n    P6 = 6,\n    //% block=\"P7\"\n    P7 = 7,\n    //% block=\"P8\"\n    P8 = 8,\n    //% block=\"P9\"\n    P9 = 9,\n    //% block=\"P10\"\n    P10 = 10,\n    //% block=\"P11\"\n    P11 = 11,\n    //% block=\"P12\"\n    P12 = 12\n}\n"],[0,"\n\n/*"]],"start1":980,"start2":980,"length1":476,"length2":8},{"diffs":[[0,"  }\n"],[-1,"    /**\n * Write digital value (0 or 1) to a pin\n * @param pin Pin to write\n * @param value Value to write (0 or 1), eg: 1\n */\n    //% blockId=\"cpe_digitalWrite\" block=\"Digital Write pin %cpeDigitalPin|value %value\"\n    //% value.min=0 value.max=1\n    //% weight=50\n    export function DigitalWrite(pin: cpeDigitalPin, value: number): void {\n        pins.digitalWritePin(<DigitalPin>pin, value)\n    }\n    /**\n     * Read digital value from a pin\n     * @param pin Pin to read from\n     */\n    //% blockId=\"cpe_digitalRead\" block=\"Digital Read pin %cpeDigitalPin\"\n    //% weight=49\n    export function DigitalRead(pin: cpeDigitalPin): number {\n        return pins.digitalReadPin(<DigitalPin>pin)\n    }\n\n"],[0,"}\n"]],"start1":5872,"start2":5872,"length1":708,"length2":6}]}]},{"timestamp":1746001332307,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"ins "],[-1,"for P0-"],[1,"P0 to "],[0,"P12\n"]],"start1":1000,"start2":1000,"length1":15,"length2":14},{"diffs":[[0,"   P0 = "],[-1,"DigitalPin.P"],[0,"0,\n    /"]],"start1":1059,"start2":1059,"length1":28,"length2":16},{"diffs":[[0,"   P1 = "],[-1,"DigitalPin.P"],[0,"1,\n    /"]],"start1":1090,"start2":1090,"length1":28,"length2":16},{"diffs":[[0,"   P2 = "],[-1,"DigitalPin.P"],[0,"2,\n    /"]],"start1":1121,"start2":1121,"length1":28,"length2":16},{"diffs":[[0,"   P3 = "],[-1,"DigitalPin.P"],[0,"3,\n    /"]],"start1":1152,"start2":1152,"length1":28,"length2":16},{"diffs":[[0,"   P4 = "],[-1,"DigitalPin.P"],[0,"4,\n    /"]],"start1":1183,"start2":1183,"length1":28,"length2":16},{"diffs":[[0,"   P5 = "],[-1,"DigitalPin.P"],[0,"5,\n    /"]],"start1":1214,"start2":1214,"length1":28,"length2":16},{"diffs":[[0,"   P6 = "],[-1,"DigitalPin.P"],[0,"6,\n    /"]],"start1":1245,"start2":1245,"length1":28,"length2":16},{"diffs":[[0,"   P7 = "],[-1,"DigitalPin.P"],[0,"7,\n    /"]],"start1":1276,"start2":1276,"length1":28,"length2":16},{"diffs":[[0,"   P8 = "],[-1,"DigitalPin.P"],[0,"8,\n    /"]],"start1":1307,"start2":1307,"length1":28,"length2":16},{"diffs":[[0,"   P9 = "],[-1,"DigitalPin.P"],[0,"9,\n    /"]],"start1":1338,"start2":1338,"length1":28,"length2":16},{"diffs":[[0,"  P10 = "],[-1,"DigitalPin.P"],[0,"10,\n    "]],"start1":1371,"start2":1371,"length1":28,"length2":16},{"diffs":[[0,"  P11 = "],[-1,"DigitalPin.P"],[0,"11,\n    "]],"start1":1405,"start2":1405,"length1":28,"length2":16},{"diffs":[[0,"2 = "],[-1,"DigitalPin.P"],[0,"12\n}\n\n\n"],[-1,"\n"],[0,"/**\n"]],"start1":1443,"start2":1443,"length1":28,"length2":15},{"diffs":[[0,"    /**\n"],[-1,"    "],[0," * Write"]],"start1":6344,"start2":6344,"length1":20,"length2":16},{"diffs":[[0,"alue"],[1," (0 or 1)"],[0," to "],[1,"a "],[0,"pin\n "],[-1,"   "],[1,"* @param pin Pin to write\n * @param value Value to write (0 or 1), eg: 1\n"],[0," */\n"]],"start1":6370,"start2":6370,"length1":20,"length2":101},{"diffs":[[0,"Id=\"cpe_"],[-1,"writeD"],[1,"d"],[0,"igital"],[1,"Write"],[0,"\" block="]],"start1":6484,"start2":6484,"length1":28,"length2":28},{"diffs":[[0,"te pin %"],[-1,"p"],[1,"cpeDigitalP"],[0,"in|value"]],"start1":6524,"start2":6524,"length1":17,"length2":27},{"diffs":[[0,"ht=5"],[-1,"5\n    //% group=\"Digital IO\""],[1,"0"],[0,"\n   "]],"start1":6604,"start2":6604,"length1":36,"length2":9},{"diffs":[[0,"ion "],[-1,"cpe_write"],[0,"Digital"],[1,"Write"],[0,"(pin"]],"start1":6626,"start2":6626,"length1":24,"length2":20},{"diffs":[[0,"ritePin("],[1,"<DigitalPin>"],[0,"pin, val"]],"start1":6707,"start2":6707,"length1":16,"length2":28},{"diffs":[[0,"n, value)\n    }\n"],[-1,"\n"],[0,"    /**\n     * R"]],"start1":6729,"start2":6729,"length1":33,"length2":32},{"diffs":[[0,"ue from "],[1,"a "],[0,"pin\n"],[1,"     * @param pin Pin to read from\n"],[0,"     */\n"]],"start1":6776,"start2":6776,"length1":20,"length2":57},{"diffs":[[0,"Id=\"cpe_"],[-1,"readD"],[1,"d"],[0,"igital"],[1,"Read"],[0,"\" block="]],"start1":6846,"start2":6846,"length1":27,"length2":27},{"diffs":[[0,"ad pin %"],[-1,"p"],[1,"cpeDigitalP"],[0,"in\"\n    "]],"start1":6884,"start2":6884,"length1":17,"length2":27},{"diffs":[[0,"ght="],[-1,"50\n    //% group=\"Digital IO\""],[1,"49"],[0,"\n   "]],"start1":6918,"start2":6918,"length1":37,"length2":10},{"diffs":[[0,"ion "],[-1,"cpe_read"],[0,"Digital"],[1,"Read"],[0,"(pin"]],"start1":6941,"start2":6941,"length1":23,"length2":19},{"diffs":[[0,"ReadPin("],[1,"<DigitalPin>"],[0,"pin)\n   "]],"start1":7014,"start2":7014,"length1":16,"length2":28},{"diffs":[[0,")\n    }\n"],[1,"\n"],[0,"}\n"]],"start1":7037,"start2":7037,"length1":10,"length2":11}]}]},{"timestamp":1746001697671,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"\"SV1"],[-1," (P13)"],[0,"\"\n  "]],"start1":516,"start2":516,"length1":14,"length2":8},{"diffs":[[0,"\"SV2"],[-1," (P14)"],[0,"\"\n  "]],"start1":545,"start2":545,"length1":14,"length2":8},{"diffs":[[0," SV2"],[-1,",\n    //% block=\"SV3 (P15)\"\n    SV3,\n    //% block=\"SV4 (P16)\"\n    SV4\n}\n"],[0,"\n}\n\n"]],"start1":554,"start2":554,"length1":81,"length2":8}]}]},{"timestamp":1746002424908,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"\n    SV4\n}\n\n"],[1,"}"],[0,"\n\n/**\n * ADC"]],"start1":632,"start2":632,"length1":24,"length2":25}]}]},{"timestamp":1746002515795,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"2\n}\n"],[-1,"/**\n * Analog pins P0 - P12\n */\nenum cpeAnalogPin {\n    //% block=\"P0\"\n    P0,\n    //% block=\"P1\"\n    P1,\n    //% block=\"P2\"\n    P2,\n    //% block=\"P3\"\n    P3,\n    //% block=\"P4\"\n    P4,\n    //% block=\"P5\"\n    P5,\n    //% block=\"P6\"\n    P6,\n    //% block=\"P7\"\n    P7,\n    //% block=\"P8\"\n    P8,\n    //% block=\"P9\"\n    P9,\n    //% block=\"P10\"\n    P10,\n    //% block=\"P11\"\n    P11,\n    //% block=\"P12\"\n    P12\n}"],[1,"\n"],[0,"\n\n/*"]],"start1":1689,"start2":1689,"length1":417,"length2":9},{"diffs":[[0,"0)\n    }"],[-1,"\n "],[0,"\n\n    /*"]],"start1":5273,"start2":5273,"length1":18,"length2":16},{"diffs":[[0,"    /**\n"],[1,"    "],[0," * Contr"]],"start1":5283,"start2":5283,"length1":16,"length2":20},{"diffs":[[0,"vo 1"],[-1,"–4"],[1," or 2"],[0," set"]],"start1":5309,"start2":5309,"length1":10,"length2":13},{"diffs":[[0,"en 0"],[-1,"–"],[1," - "],[0,"180\n"],[1,"    "],[0," * @"]],"start1":5335,"start2":5335,"length1":13,"length2":19},{"diffs":[[0,"ee 0"],[-1,"–"],[1,"-"],[0,"180,"]],"start1":5377,"start2":5377,"length1":9,"length2":9},{"diffs":[[0," eg: 90\n"],[1,"    "],[0," */\n    "]],"start1":5386,"start2":5386,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"switch"],[1,"if"],[0," (Servo"],[-1,") {\n            case"],[1," =="],[0," cpe"]],"start1":5594,"start2":5594,"length1":41,"length2":20},{"diffs":[[0," == cpeServo.SV1"],[-1,":\n    "],[1,") {\n"],[0,"            pins"]],"start1":5607,"start2":5607,"length1":38,"length2":36},{"diffs":[[0,"logPin.P"],[-1,"13"],[1,"8"],[0,", Degree"]],"start1":5661,"start2":5661,"length1":18,"length2":17},{"diffs":[[0,"    "],[-1,"        break\n            case cpeServo.SV2:\n                pins.servoWritePin(AnalogPin.P14, Degree)\n                break\n            case cpeServo.SV3:\n                pins.servoWritePin(AnalogPin.P15, Degree)\n                break\n            case cpeServo.SV4:\n   "],[1,"}\n        else if (Servo == cpeServo.SV2) {\n"],[0,"    "]],"start1":5684,"start2":5684,"length1":278,"length2":52},{"diffs":[[0,") {\n            "],[-1," "],[0,"pins.servoWriteP"]],"start1":5728,"start2":5728,"length1":33,"length2":32},{"diffs":[[0,"ogPin.P1"],[-1,"6"],[1,"2"],[0,", Degree"]],"start1":5767,"start2":5767,"length1":17,"length2":17},{"diffs":[[0,"Degree)\n"],[-1,"                break\n"],[0,"        "]],"start1":5778,"start2":5778,"length1":38,"length2":16},{"diffs":[[0,"    "],[-1,"switch"],[1,"if"],[0," (Servo"],[-1,") {\n            case"],[1," =="],[0," cpe"]],"start1":6025,"start2":6025,"length1":41,"length2":20},{"diffs":[[0,"ervo.SV1"],[-1,":\n    "],[1,") {\n"],[0,"        "]],"start1":6046,"start2":6046,"length1":22,"length2":20},{"diffs":[[0,"(AnalogPin.P"],[-1,"13"],[1,"8"],[0,", 0)\n       "]],"start1":6088,"start2":6088,"length1":26,"length2":25},{"diffs":[[0,"    "],[-1,"        break\n            case cpeServo.SV2:\n                pins.servoSetPulse(AnalogPin.P14, 0)\n                break\n            case cpeServo.SV3:\n                pins.servoSetPulse(AnalogPin.P15, 0)\n                break\n            case"],[1,"}\n        else if (Servo =="],[0," cpe"]],"start1":6110,"start2":6110,"length1":250,"length2":35},{"diffs":[[0,"o.SV"],[-1,"4:\n    "],[1,"2) {\n"],[0,"    "]],"start1":6149,"start2":6149,"length1":15,"length2":13},{"diffs":[[0,"n.P1"],[-1,"6"],[1,"2"],[0,", 0)\n"],[-1,"                break\n"],[0,"    "]],"start1":6197,"start2":6197,"length1":36,"length2":14},{"diffs":[[0,"  }\n"],[-1,"    \n"],[0,"}\n"]],"start1":7188,"start2":7188,"length1":11,"length2":6}]}]},{"timestamp":1746003111674,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_forever\" x=\"0\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":62}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":373,"start2":373,"length1":52,"length2":8}]},{"type":"edited","filename":"pnu_cpe.ts","patch":[{"diffs":[[0,"    "],[-1,"/**\n * Read analog value from pin P0 - P12\n * @param pin Analog pin to read\n */\n    //% blockId=\"cpe_readAnalog\" block=\"Read analog pin %pin\"\n    //% weight=50\n    export function readAnalog(pin: cpeAnalogPin): number {\n        switch (pin) {\n            case cpeAnalogPin.P0: return pins.analogReadPin(AnalogPin.P0);\n            case cpeAnalogPin.P1: return pins.analogReadPin(AnalogPin.P1);\n            case cpeAnalogPin.P2: return pins.analogReadPin(AnalogPin.P2);\n            case cpeAnalogPin.P3: return pins.analogReadPin(AnalogPin.P3);\n            case cpeAnalogPin.P4: return pins.analogReadPin(AnalogPin.P4);\n            case cpeAnalogPin.P5: return pins.analogReadPin(AnalogPin.P5);\n            case cpeAnalogPin.P6: return pins.analogReadPin(AnalogPin.P6);\n            case cpeAnalogPin.P7: return pins.analogReadPin(AnalogPin.P7);\n            case cpeAnalogPin.P8: return pins.analogReadPin(AnalogPin.P8);\n            case cpeAnalogPin.P9: return pins.analogReadPin(AnalogPin.P9);\n            case cpeAnalogPin.P10: return pins.analogReadPin(AnalogPin.P10);\n            case cpeAnalogPin.P11: return pins.analogReadPin(AnalogPin.P11);\n            case cpeAnalogPin.P12: return pins.analogReadPin(AnalogPin.P12);\n            default: return 0;\n        }\n    }\n"],[0,"\n}\n"]],"start1":8121,"start2":8121,"length1":1278,"length2":7}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1745995632423,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"PNU_CPE\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1745999396811,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","pnu_cpe.ts":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1\"\n    SV1,\n    //% block=\"SV2\"\n    SV2\n}\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    /**\n     * Control Servo 1 or 2 set degree between 0 - 180\n     * @param Degree servo degree 0-180, eg: 90\n     */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoWritePin(AnalogPin.P8, Degree)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoWritePin(AnalogPin.P12, Degree)\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    export function ServoStop(Servo: cpeServo): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoSetPulse(AnalogPin.P8, 0)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoSetPulse(AnalogPin.P12, 0)\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n}\n","pxt.json":"{\n    \"name\": \"PNU_CPE\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"pnu_cpe.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1746001309954,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","pnu_cpe.ts":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1\"\n    SV1,\n    //% block=\"SV2\"\n    SV2\n}\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n/**\n * Digital pins P0 to P12\n */\nenum cpeDigitalPin {\n    //% block=\"P0\"\n    P0 = 0,\n    //% block=\"P1\"\n    P1 = 1,\n    //% block=\"P2\"\n    P2 = 2,\n    //% block=\"P3\"\n    P3 = 3,\n    //% block=\"P4\"\n    P4 = 4,\n    //% block=\"P5\"\n    P5 = 5,\n    //% block=\"P6\"\n    P6 = 6,\n    //% block=\"P7\"\n    P7 = 7,\n    //% block=\"P8\"\n    P8 = 8,\n    //% block=\"P9\"\n    P9 = 9,\n    //% block=\"P10\"\n    P10 = 10,\n    //% block=\"P11\"\n    P11 = 11,\n    //% block=\"P12\"\n    P12 = 12\n}\n\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    /**\n     * Control Servo 1 or 2 set degree between 0 - 180\n     * @param Degree servo degree 0-180, eg: 90\n     */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoWritePin(AnalogPin.P8, Degree)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoWritePin(AnalogPin.P12, Degree)\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    export function ServoStop(Servo: cpeServo): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoSetPulse(AnalogPin.P8, 0)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoSetPulse(AnalogPin.P12, 0)\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n}\n","pxt.json":"{\n    \"name\": \"PNU_CPE\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"iBIT\": \"github:emwta/pxt-ibit#v4.0.10\",\n        \"pxt-PTKidsBIT-Robot\": \"github:iBuilds/pxt-PTKidsBIT-Robot#v1.6.4\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"pnu_cpe.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1746003111674,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","pnu_cpe.ts":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1 (P13)\"\n    SV1,\n    //% block=\"SV2 (P14)\"\n    SV2,\n    //% block=\"SV3 (P15)\"\n    SV3,\n    //% block=\"SV4 (P16)\"\n    SV4\n}\n\n\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n/**\n * Digital pins for P0-P12\n */\nenum cpeDigitalPin {\n    //% block=\"P0\"\n    P0 = DigitalPin.P0,\n    //% block=\"P1\"\n    P1 = DigitalPin.P1,\n    //% block=\"P2\"\n    P2 = DigitalPin.P2,\n    //% block=\"P3\"\n    P3 = DigitalPin.P3,\n    //% block=\"P4\"\n    P4 = DigitalPin.P4,\n    //% block=\"P5\"\n    P5 = DigitalPin.P5,\n    //% block=\"P6\"\n    P6 = DigitalPin.P6,\n    //% block=\"P7\"\n    P7 = DigitalPin.P7,\n    //% block=\"P8\"\n    P8 = DigitalPin.P8,\n    //% block=\"P9\"\n    P9 = DigitalPin.P9,\n    //% block=\"P10\"\n    P10 = DigitalPin.P10,\n    //% block=\"P11\"\n    P11 = DigitalPin.P11,\n    //% block=\"P12\"\n    P12 = DigitalPin.P12\n}\n/**\n * Analog pins P0 - P12\n */\nenum cpeAnalogPin {\n    //% block=\"P0\"\n    P0,\n    //% block=\"P1\"\n    P1,\n    //% block=\"P2\"\n    P2,\n    //% block=\"P3\"\n    P3,\n    //% block=\"P4\"\n    P4,\n    //% block=\"P5\"\n    P5,\n    //% block=\"P6\"\n    P6,\n    //% block=\"P7\"\n    P7,\n    //% block=\"P8\"\n    P8,\n    //% block=\"P9\"\n    P9,\n    //% block=\"P10\"\n    P10,\n    //% block=\"P11\"\n    P11,\n    //% block=\"P12\"\n    P12\n}\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n \n\n    /**\n * Control Servo 1–4 set degree between 0–180\n * @param Degree servo degree 0–180, eg: 90\n */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        switch (Servo) {\n            case cpeServo.SV1:\n                pins.servoWritePin(AnalogPin.P13, Degree)\n                break\n            case cpeServo.SV2:\n                pins.servoWritePin(AnalogPin.P14, Degree)\n                break\n            case cpeServo.SV3:\n                pins.servoWritePin(AnalogPin.P15, Degree)\n                break\n            case cpeServo.SV4:\n                pins.servoWritePin(AnalogPin.P16, Degree)\n                break\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    export function ServoStop(Servo: cpeServo): void {\n        switch (Servo) {\n            case cpeServo.SV1:\n                pins.servoSetPulse(AnalogPin.P13, 0)\n                break\n            case cpeServo.SV2:\n                pins.servoSetPulse(AnalogPin.P14, 0)\n                break\n            case cpeServo.SV3:\n                pins.servoSetPulse(AnalogPin.P15, 0)\n                break\n            case cpeServo.SV4:\n                pins.servoSetPulse(AnalogPin.P16, 0)\n                break\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n    /**\n     * Write digital value to pin\n     */\n    //% blockId=\"cpe_writeDigital\" block=\"Digital Write pin %pin|value %value\"\n    //% value.min=0 value.max=1\n    //% weight=55\n    //% group=\"Digital IO\"\n    export function cpe_writeDigital(pin: cpeDigitalPin, value: number): void {\n        pins.digitalWritePin(pin, value)\n    }\n\n    /**\n     * Read digital value from pin\n     */\n    //% blockId=\"cpe_readDigital\" block=\"Digital Read pin %pin\"\n    //% weight=50\n    //% group=\"Digital IO\"\n    export function cpe_readDigital(pin: cpeDigitalPin): number {\n        return pins.digitalReadPin(pin)\n    }\n}\n","pxt.json":"{\n    \"name\": \"PNU_CPE\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"iBIT\": \"github:emwta/pxt-ibit#v4.0.10\",\n        \"pxt-PTKidsBIT-Robot\": \"github:iBuilds/pxt-PTKidsBIT-Robot#v1.6.4\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"pnu_cpe.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1746003169087}